import { NextRequest, NextResponse } from 'next/server'
import bcrypt from 'bcryptjs'
import { query } from '@/lib/database'

// For√ßar rota din√¢mica
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json()
    
    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email e senha s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }
    
    console.log(`üîç Debug Auth: Testando login para ${email}...`)
    
    // Buscar usu√°rio no banco
    const result = await query('SELECT * FROM users WHERE email = $1', [email])
    const user = result.rows[0]
    
    if (!user) {
      console.log(`‚ùå Usu√°rio n√£o encontrado: ${email}`)
      return NextResponse.json({
        success: false,
        step: 'user_not_found',
        message: 'Usu√°rio n√£o encontrado',
        email: email
      })
    }
    
    console.log(`‚úÖ Usu√°rio encontrado: ${user.email}`)
    console.log(`üîê Testando senha...`)
    
    // Testar senha
    const isValidPassword = await bcrypt.compare(password, user.password)
    
    if (!isValidPassword) {
      console.log(`‚ùå Senha incorreta para: ${email}`)
      return NextResponse.json({
        success: false,
        step: 'invalid_password',
        message: 'Senha incorreta',
        email: email,
        user_found: true
      })
    }
    
    console.log(`‚úÖ Senha correta para: ${email}`)
    
    return NextResponse.json({
      success: true,
      message: 'Autentica√ß√£o bem-sucedida',
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        created_at: user.created_at
      }
    })
    
  } catch (error) {
    console.error('‚ùå Erro no teste de autentica√ß√£o:', error)
    
    return NextResponse.json(
      { 
        error: 'Erro no teste de autentica√ß√£o',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    )
  }
}
