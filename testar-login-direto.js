// Script para testar login diretamente
const https = require('https');

const BASE_URL = 'https://webservice-5yg7.onrender.com';

console.log('üîç Testando login diretamente...');
console.log(`üåê URL: ${BASE_URL}`);
console.log('');

// Fun√ß√£o para fazer requisi√ß√µes HTTP
function makeRequest(url, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname + urlObj.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Login-Test-Direto/1.0',
        ...headers
      }
    };

    if (data) {
      const jsonData = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(jsonData);
    }

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(body);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

// Fun√ß√£o principal
async function testarLoginDireto() {
  try {
    console.log('üöÄ TESTANDO LOGIN DIRETAMENTE...');
    console.log('');

    // 1. Testar credenciais Jeflix
    console.log('1Ô∏è‚É£ Testando credenciais Jeflix...');
    const loginJeflix = await makeRequest(`${BASE_URL}/api/auth/login`, 'POST', {
      email: 'jeflix@jus.com',
      password: 'admin1234'
    });
    
    console.log(`Status: ${loginJeflix.status}`);
    console.log(`Resposta: ${JSON.stringify(loginJeflix.data, null, 2)}`);
    
    if (loginJeflix.status === 200) {
      console.log('‚úÖ LOGIN JEFLIX FUNCIONANDO!');
    } else {
      console.log('‚ùå LOGIN JEFLIX FALHOU');
    }

    // 2. Testar credenciais admin
    console.log('\n2Ô∏è‚É£ Testando credenciais admin...');
    const loginAdmin = await makeRequest(`${BASE_URL}/api/auth/login`, 'POST', {
      email: 'admin@jus.com',
      password: 'admin123'
    });
    
    console.log(`Status: ${loginAdmin.status}`);
    console.log(`Resposta: ${JSON.stringify(loginAdmin.data, null, 2)}`);
    
    if (loginAdmin.status === 200) {
      console.log('‚úÖ LOGIN ADMIN FUNCIONANDO!');
    } else {
      console.log('‚ùå LOGIN ADMIN FALHOU');
    }

    // 3. Testar credenciais padr√£o
    console.log('\n3Ô∏è‚É£ Testando credenciais padr√£o...');
    const loginPadrao = await makeRequest(`${BASE_URL}/api/auth/login`, 'POST', {
      email: 'admin@example.com',
      password: 'admin123'
    });
    
    console.log(`Status: ${loginPadrao.status}`);
    console.log(`Resposta: ${JSON.stringify(loginPadrao.data, null, 2)}`);
    
    if (loginPadrao.status === 200) {
      console.log('‚úÖ LOGIN PADR√ÉO FUNCIONANDO!');
    } else {
      console.log('‚ùå LOGIN PADR√ÉO FALHOU');
    }

    // 4. Verificar usu√°rios existentes
    console.log('\n4Ô∏è‚É£ Verificando usu√°rios existentes...');
    const users = await makeRequest(`${BASE_URL}/api/auth/list-users`);
    
    console.log(`Status: ${users.status}`);
    console.log(`Resposta: ${JSON.stringify(users.data, null, 2)}`);
    
    if (users.status === 200) {
      console.log(`‚úÖ Usu√°rios encontrados: ${users.data.total_users || 0}`);
    } else {
      console.log('‚ùå Falha ao obter usu√°rios');
    }

    // 5. Verificar status do banco
    console.log('\n5Ô∏è‚É£ Verificando status do banco...');
    const status = await makeRequest(`${BASE_URL}/api/init-database`);
    
    console.log(`Status: ${status.status}`);
    console.log(`Resposta: ${JSON.stringify(status.data, null, 2)}`);
    
    if (status.status === 200) {
      console.log(`‚úÖ Status do banco: ${status.data.status}`);
      console.log(`üîó Banco conectado: ${status.data.database_connected ? 'SIM' : 'N√ÉO'}`);
    } else {
      console.log('‚ùå Falha ao verificar status do banco');
    }

    // 6. Tentar inicializar banco
    console.log('\n6Ô∏è‚É£ Tentando inicializar banco...');
    const initResult = await makeRequest(`${BASE_URL}/api/init-database`, 'POST', null, {
      'Authorization': 'Bearer init-secret-token-2024'
    });
    
    console.log(`Status: ${initResult.status}`);
    console.log(`Resposta: ${JSON.stringify(initResult.data, null, 2)}`);
    
    if (initResult.status === 200) {
      console.log('‚úÖ Banco inicializado com sucesso!');
    } else {
      console.log('‚ùå Falha ao inicializar banco');
    }

    // 7. Criar usu√°rio Jeflix
    console.log('\n7Ô∏è‚É£ Tentando criar usu√°rio Jeflix...');
    const createJeflix = await makeRequest(`${BASE_URL}/api/auth/create-user`, 'POST', {
      email: 'jeflix@jus.com',
      password: 'admin1234',
      name: 'Jeflix Admin',
      role: 'admin'
    });
    
    console.log(`Status: ${createJeflix.status}`);
    console.log(`Resposta: ${JSON.stringify(createJeflix.data, null, 2)}`);
    
    if (createJeflix.status === 200) {
      console.log('‚úÖ Usu√°rio Jeflix criado!');
    } else {
      console.log('‚ùå Falha ao criar usu√°rio Jeflix');
    }

    // 8. Testar login Jeflix novamente
    console.log('\n8Ô∏è‚É£ Testando login Jeflix novamente...');
    const loginJeflix2 = await makeRequest(`${BASE_URL}/api/auth/login`, 'POST', {
      email: 'jeflix@jus.com',
      password: 'admin1234'
    });
    
    console.log(`Status: ${loginJeflix2.status}`);
    console.log(`Resposta: ${JSON.stringify(loginJeflix2.data, null, 2)}`);
    
    if (loginJeflix2.status === 200) {
      console.log('‚úÖ LOGIN JEFLIX FUNCIONANDO AP√ìS CRIA√á√ÉO!');
      console.log(`üé´ Token: ${loginJeflix2.data.token ? 'GERADO' : 'N√ÉO GERADO'}`);
    } else {
      console.log('‚ùå LOGIN JEFLIX AINDA FALHANDO');
    }

    console.log('\nüìã RESUMO DOS TESTES:');
    console.log('=====================');
    console.log('üîç Teste de login Jeflix: ' + (loginJeflix2.status === 200 ? '‚úÖ SUCESSO' : '‚ùå FALHA'));
    console.log('üîç Teste de login admin: ' + (loginAdmin.status === 200 ? '‚úÖ SUCESSO' : '‚ùå FALHA'));
    console.log('üîç Teste de login padr√£o: ' + (loginPadrao.status === 200 ? '‚úÖ SUCESSO' : '‚ùå FALHA'));
    console.log('üîç Banco conectado: ' + (status.data?.database_connected ? '‚úÖ SIM' : '‚ùå N√ÉO'));
    console.log('üîç Usu√°rios existentes: ' + (users.data?.total_users || 0));

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  }
}

// Executar testes
testarLoginDireto().catch(console.error);
